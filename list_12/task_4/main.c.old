#include <avr/interrupt.h>
#include <avr/io.h>
#include <stdio.h>
#include <util/delay.h>

#define BAUD 9600 // baudrate
#define UBRR_VALUE ((F_CPU) / 16 / (BAUD)-1) // zgodnie ze wzorem

// inicjalizacja UART
static inline void uart_init(void) {
    // ustaw baudrate
    UBRR0 = UBRR_VALUE;
    // włącz odbiornik i nadajnik
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    // ustaw format 8n1
    UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
}

// transmisja jednego znaku
static int uart_transmit(char data, FILE* stream) {
    // czekaj aż transmiter gotowy
    while (!(UCSR0A & _BV(UDRE0)))
        ;
    UDR0 = data;
    return 0;
}

// odczyt jednego znaku
static int uart_receive(FILE* stream) {
    // czekaj aż znak dostępny
    while (!(UCSR0A & _BV(RXC0)))
        ;
    return UDR0;
}

FILE uart_file;

#define CAPACITOR_MUX ADC2D

static inline void initialize_adc(void) {
    ADMUX = _BV(REFS1) | _BV(REFS0); // referencja AVcc = 1.1V
    ADMUX |= CAPACITOR_MUX; // pomiar ADC2
    DIDR0 = _BV(CAPACITOR_MUX); // wyłącz wejście cyfrowe na ADC2
    // częstotliwość zegara ADC 125 kHz (16 MHz / 128)
    ADCSRA = _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2); // preskaler 128
    ADCSRA |= _BV(ADIE); // włącz przerwanie
    ADCSRA |= _BV(ADEN); // włącz ADC
}

static inline void initialize_timer(void) {
    // ustaw tryb licznika
    // COM1A = 10   -- non-inverting mode
    // WGM1  = 1110 -- Fast PWM top=ICR1
    // CS1   = 101  -- prescaler 1024
    // ICR1  = 16*10^6/(frequency*1024)-1
    // częstotliwość 16e6/(1024*(1+ICR1) = frequency Hz

    OCR1A = 15999;
    TCCR1A = _BV(COM1A1);
    TCCR1B = _BV(CS10);

    TCCR1A |= _BV(WGM11) | _BV(WGM10);
    TCCR1B |= _BV(WGM13) | _BV(WGM12);

    TIMSK1 |= _BV(ICIE1) | _BV(TOIE1);
}

static inline void initialize_comparator(void) {
    // ACSR |= _BV(ACIE);
    ACSR |= _BV(ACIC);
    DIDR1 |= _BV(AIN0D);
    DIDR1 |= _BV(AIN1D);
}

// ISR(ANALOG_COMP_vect) {
//     putchar('a');
// }

static volatile uint16_t full_cycles = 0;
static volatile uint16_t input_timestamp = 0;
static volatile uint16_t full_cycles_timestamp = 0;
static volatile uint16_t cnt = 0;

ISR(TIMER1_CAPT_vect) {
    cnt++;
    input_timestamp = TCNT1;
    full_cycles_timestamp = full_cycles;
    // putchar('b');
    TIMSK1 &= ~_BV(ICIE1);
}

ISR(TIMER1_OVF_vect) {
    full_cycles++;
    // putchar('c');
}

#define DUMPER_PORT PORTD
#define DUMPER_DDR DDRD
#define DUMPER_PIN PIND
#define DUMPER PD4

int main(void) {
    uart_init();
    fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
    stdin = stdout = stderr = &uart_file;

    DUMPER_PORT &= ~_BV(DUMPER);
    DUMPER_DDR |= _BV(DUMPER);

    initialize_comparator();
    initialize_timer();

    // printf("Podaj częstotliwość migania diody...\r\n");
    // uint16_t frequency;
    // scanf("%" SCNu16, &frequency);
    // ICR1 = (uint32_t)16000000 / ((uint32_t)frequency * 1024) - 1;
    // OCR1A = ICR1 / 2;
    // initialize_timer();

    while (1) {
        _delay_ms(2000);
        full_cycles = 0;
        input_timestamp = 0;
        full_cycles_timestamp = 0;
        TCNT1 = 0;
        ICR1 = 0;
        DUMPER_DDR &= ~_BV(DUMPER);
        DUMPER_PORT |= _BV(DUMPER);
        sei();
        // counter = 0;

        // sei();
        //
        // cli();

        // printf("%" PRIu16 " Hz\r\n", counter);
        _delay_ms(2000);
        printf("\r\n%u %u %u\r\n", full_cycles_timestamp, input_timestamp, cnt);
        cli();
    }
}
